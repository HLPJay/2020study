日志库：
	
	
	1：常用的日志库：moduo，glog，log4z，log4cpp
	2：怎么设计才会高效？
		(1)如：高吞吐量  100万条/s
		(2)宕机，有些日志没有写进去是什么原因？
	3：十万条高并发的测试。 ===》最好cpu负载比较低
		高吞吐量==》攒一起，然后一次写入，批量写入。 (也不敢设置过大，如果宕机，很多消息丢失)
				==》异步
		好的日志log：
			（1）缓存数据长度，比如10k写入一次盘
			（2）定时器：有时间计数，有1s没有刷新，则需要刷新。
			（3）同步日志，异步日志
				同步日志：单线程，支持批量写入才能高效
				异步日志：2个线程，1个负责格式化，另外一个负责批量写入
	4：log4cpp开源库的理解：
			message  ==》一条消息
			category ==》日志接口
		appender1     appender2    appender3
											layout ==》控制输出格式
		   output        output       output
不通的append 可以输出到终端，可以输出到本地，可以输出到远程服务器（一般走TCP，保证可靠性）
	===》一个appender只能选择一种输出格式
	5：日志级别可以写到脚本中==》根据库里定义的日志级别，log4里info级别比debug还低
		日志可以按区域划分==》如只打印error级别、某个日志文件只打印某个线程的
			以上级别会打印
			
		两个apped的实现
	6：退出时要调用shutdown正常退出
	7：有两种风格  C语言和C++风格
	8：try  throw等的意思？
	9：分析相关对应的类
		输出到缓冲队列
		输出到文件系统
		   支持按天为单位记录日志  10天循环
		   支持循环写入
		输出到流
		输出到。。。
	10：FileAppender==》一般不用这个，会把文件系统写爆
	    一般用DailyRollingFileAppender.==》没有限制每个文件的大小，可以设置保存多少天的日志
		RillingFileAppender： 可以限制文件大小
			==》性能相对低，每次都要去看文件大小
	
	11：Layout ==》设置日志输出格式，比如 带日期，带文件等。。。
	12：K M G的概念，设置及整理
	13：根据日志研究回滚的原理
	14：用代码测试查看：
		g++ test_log4cpp1.cpp -o test_log4cpp1 -llog4cpp -lpthread
	15：log4cpp ==》同步写入
	    log4plus ==>支持异步
	16：Appender自己new的，要释放。
	17：效率不高==》没有做缓存，直接write
		用同步实现批量写入比较麻烦==》100条数据批量写入，只有99条，下次写入还是不写 
			批量写入一般用一般好实现 （时间出发）
		glog，==>支持批量写入，不支持配置文件
		log4cplus 本身支持异步写入  ==》更支持服务器
		log4cpp  更支持客户端
		log4cxx
			==》都是log4j衍生出来的
	
	可以自己参考实现以下
		
