	
学习任务规划：
1：安装及启动mysql。	
	1：数据库的基本操作
	ubuntu MySQL安装 
	sudo apt-get install mysql-server
	sudo apt-get install mysql-client
	sudo apt-get install libmysqlclient-dev 
	检查是否安装成功：
	sudo netstat -tap | grep mysql   ===》listen状态
	tcp        0      0 localhost.localdo:mysql 0.0.0.0:*               LISTEN      20020/mysqld        
	2:要用别的电脑客户端连接mysql  需要修改配置文件：
	/etc/mysql/mysql.conf.d/mysqld.cnf 
	注释掉：#bind-address           = 127.0.0.1
	3：客户端连接 mysql：
	sudo mysql -u root -p
	mysql -h127.0.0.1 -uroot -p
	
	4：启动，停止，重启：
	sudo /etc/init.d/mysql start|stop|restart 
	sudo service mysql start|stop|restart 
2：卸载mysql
	 sudo apt-get autoremove --purge mysql-server
	 sudo apt-get remove mysql-server 
	 sudo apt-get autoremovemysql-server 
	 sudo apt-get remove mysql-common 
	 dpkg -l | grep ^rc| awk '{print $2}' | sudo xargsdpkg -P 
	 一般执行 2、4、5 即可
3：文件默认位置：
	/usr/bin 客户端程序和脚本 
	/usr/sbin mysqld 服务器 
	/var/lib/mysql 日志文件，数据库 ［重点］ 
	/usr/share/doc/packages 文档 
	/usr/include/mysql 包含(头)>文件 
	/usr/lib/mysql 库 
	/usr/share/mysql 错误消息和字符集文件 
	/usr/share/sql-bench 基准程序
	
	连接云服务器上的mysql要注意，
		1：数据库里开了权限
		2：修改配置文件允许外机连接
		3：防火墙问题
		
4：Mysql的执行过程：
	连接器，查询缓存，分析器，优化器，执行器，存储引擎
	（查询缓存在mysql18.0去掉了）
5：创建用户及授权：
	CREATE USER '用户名'@'IP地址/通配符%' IDENTIFIED BY password; （无密码则直接登录）
	grant privileges on 库名.表名 to '用户名'@'IP地址' identified by '密码' with grant option;
    flush privileges;
	//privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL
	//with grant option ;加这个说明，这个用户有权限授予下一个人他所有的权限；
测试流程：
	1：观察数据库中关于密码的存储
	2：修改密码权限
	3：新增用户授权
	5：删除用户
	
	user表位于mysq数据库中，所以，操作流程：
	修改root密码：密码是加密的，不能查看，所以直接修改
		 set password for root@localhost = password('123456'); ===》其他两种方法没有试成功
	1：查看数据库：            show databases;
	2：使用user切换数据库：    use mysql;
	3：查看mysql数据库中的表： show tables;
	4：查看user中的信息        select * from user;
	   查看user的表头结构：    select user,host from user;
	   可以看到已有用户和用户允许登录的ip
	5：新建用户： 
			CREATE USER 'hlp'@'%' IDENTIFIED BY '1234567';
			set password for 'hlp'@'%' = password('123456');
			flush privileges;
	6：修改权限：
			用新增的用户登录数据库： sudo mysql -u hlp -p123456  ==》无法操作数据库，Access denied for user 'hlp'@'%' to database 'mysql'
			grant all on *.* to hlp@'%' identified by '123456';   //没有权限授予下一个人权限
			grant all on *.* to hlp@'%' identified by '123456' with grant option; //有权限授予下一个人他所有的权限
			flush privileges;
	8：删除用户：delete from user where user='hlp1';
6：使用代码连接数据库测试：
	-Wall选项意思是编译后显示所有警告。
	 g++ -Wall mysql_test.c -o mysql_test -lmysqlclient
	 1：确定要连接的用户  ==》修改代码
	 2：创建相关的数据库以及相关的表。 ===》通过数据库文件对其进行修改
	 3：通过代码对表进行操作。  ===》与数据库中定义的结构要匹配
7：事务 ==》全部执行，全部不执行
	数据库引擎 Innodb ===》支持事务  ===》支持行级锁  ==》直接存储索引和数据
	               ==》B+树实现 ===》高并发
	           MyISAM ===》不支持事务 ===》支持表级锁 ==》索引和数据分开存，需要与主键关联
					==》B+树实现
	事务用来管理 insert， update，delete语句。
	事务的特性ACID： 原子性，  一致性，  隔离性，  持久性
	隔离性介绍：
		start/begin transaction;       #开启事务
		insert into t_user(name) values('milo');
		commit;                  #commit 之后即可改变底层数据库数据
		select * from t_user;
		start transaction;
		insert into t_user(name) values('qiuxiang'); 
		rollback;
		select * from t_user;
	未完成：代码实现：==》失败时回滚，否则执行。
	
	
	事务的隔离性有四个级别：
											脏读    不可重复读    幻读
		（1）读未提交：read uncommitted      是         是         是 
		（2）读已提交：read committed        否			是         是 
		（3）可重复读：repeatable read       否         否         是 
		（4）串行化：serializable            否			否		   否
		
		
	问题：如何对各种隔离级别做实例？
		脏读：当前事务(A)中可以读到其他事务(B)未提交的数据（脏数据）
		不可重复读：在事务 A 中先后两次读取同一个数据，两次读取的结果不一样   ==》针对update
		幻读：在事务 A 中按照某个条件先后两次查询数据库，两次查询结果的条数不同 ===》行数变了 ==》针对 insert 与 delete 操作
8：备份
		备份命令：	mysqldump -h主机名 -P端口 -u用户名 -p密码 [-R] 数据库名 > 文件名.sql
		        mysqldump -uhlp -p123456 -R lingsheng-test > dump.sql  ===》当前目录
		使用scp命令进行拷贝。
		恢复命令：mysql -h主机名 -P端口 -u用户名 -p密码 数据库名 < 文件名.sql 
				mysql -uhlp -p123456 lingsheng < /home/milo/dump.sql
9：分库分表（IO瓶颈）
		1：磁盘读IO瓶颈 ==>热点数据太多，数据库缓存不下。==》频繁查询，产生大量io，需要降低查询速度==》分库和垂直分表
		2：网络IO瓶颈 ===》请求数据太多，网络宽带不够。 ==》分库
	问题：如何分库？如何分表？
10：优化
	① SQL语句及索引的优化   ==》影响最大
	② 数据库表结构的优化 
	③ 系统配置的优化 
	④ 硬件的优化
11：没有完成：
	1：实现mysql基础操作的代码。
	2：mysql事务操作的基础代码。
	3：mysql预处理的代码
	4：如何实现分库分表。
	5：如何优化