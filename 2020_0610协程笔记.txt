协程是什么？
	协程是轻量级的运行单位
协程用在哪里？   ===》思考：客户端为什么用协程？  服务器为什么用协程？
	客户端和服务器端都能用~
	则 一请求一回复  ==》涉及同步（请求和接收在同一个流程），异步
协程解决什么问题？
	
客户端的同步和异步：
	服务器请求mysql/redis/web/dns-->请求一个回复一个 同步操作 --》参考代码 sync_dns_client.c
	请求与响应不在同一个流程      异步操作
		==》async_dns_client.c
服务器的同步和异步：
	./mul_port_client_epoll.c 服务器ip port ==>3个客户端
	./server_mulport_epoll.c
	同步  1000个连接 大约6000ms 直接对io进行读写
	异步  1000个        800ms   （线程池堆io进行读写操作）
  
  epoll监听，epoll_wait()与recv/send在同一个流程里叫同步操作

异步io：linux aio子系统，io_setup
	io有数据，从内核里通过回调函数到用户态
异步操作：对io进行异步操作

问题：
	为什么linux下有aio，为什么服务器网络io的时候不用异步io


同步与异步，和协程有什么关系？
伪代码分析同步异步差异~
异步涉及多个线程访问同一个fd，需要加锁 这里需要协程
同步：代码流程清晰
异步：性能好
协程：异步的性能，同步的编程方式。

协程：
	客户端实现编码：
	服务器端实现编码：

	如何把同步改为异步：
		king四元组： 阻塞fd，send前检查是否可写
			1：commit 
				1：创建socket
				2：encode procotol 协议
				3：send()
				4：epoll_ctl() 交给epoll
			2：callback ==》创建的另外一个线程
				1：epoll_wait()

			3：create_context
			4：destory_context
int commit()
{
	send();

	recv();
}

改成同步：
	1：yeild  让出cpu    (yeild 到epoll_wait中)
	2：resume 重新恢复运行（epoll检测到数据触发）
			（从epoll_wait中拿出）

resume和yeild如何实现？
	1:setjmp/longjmp
	2:ucontext
	3:自己实现切换，汇编实现

libco 也是汇编实现的
自己实现切换，汇编实现：
	x86 15个寄存器 ==》决定了cpu如何运行
	寄存器组就是上下文

switch(new_ctx, cur_ctx){
	save(thread1)
	load(thread2)
}

基础原语操作：
	yeild --->调用switch
	resume --->调用switch 实现切换

原语操作： 最小的操作单位 基本操作
调度器决定调度哪个单位：

fd和ctx如何关联？ ==》结构体的方式

结构体怎么定义？
struct{
	int fd;
	context ctx;

	func()//每个线程的回调
	param ;参数
	status;运行的状态 ready running defer wait
}

运行状态  用什么结构来存储？

/****************************************
1：异步的实现    king式四元组
2：yeild 和 resumen 
通过原语实现：
	1：setjmp/longjmp
	2：ucontext
	3：汇编自己实现
3：协程的定义，调度器的定义：

***************************************/
//队列节点 和业务分离
//也就是 *prev *next不要放在业务结构体里
	struct coroutine{
		int fd; //一个协程对应一个fd 同步流程
		context ctx; //CPU切换的
		
		void* func(void *); //每个协程都有一个入口函数
		void* param; //函数参数

		//调度器的栈空间 调度会破坏栈空间
//协程栈
	// --》压栈 esp/rsp
	//切换的时候  把esp/rsp指向栈，切换就到栈底了
		//这个栈空间决定了协程能分配的个数  可以设置动态的扩大
		void *stack;//指向栈指针 rsp 使每个协程独立空间
		size_t stack_size;

		unsigned int status; //当前状态ready  running defer wait
		
		//ready可用红黑树或者队列来存
		queue_node(coroutine) ready_node;
		//做存储用并且有序，用红黑树
		//红黑树两大用途：1：有序（中序遍历是顺序的） 2：key-value映射关系（map）
		rbtree_node(coroutine) defer_node;//延迟节点 key是时间戳， 节点是协程		
//节点前面的 全部就绪 
//key如果重复 +1 +2 （因为时间戳很小了，影响很小）
// 红黑树可以重复  但是 影响查找结果
		rbtree_node(coroutine) wait_node;//条件等待超时
	}
//维护协程的运行==》维护三个结构体
	//ready就绪队列
	//defer延迟
	//wait 
	struct schedule{
		struct coroutine *current; //当前运行的协程
			//yeild(current->ctx,)
		queue_head(coroutine) ready_queue;//就绪的队列
		//协程coroutine里做yeild    epoll_wait里做resume 一个线程

	}

//x86汇编指令   定义寄存器
	struct context{
		void *eax; // 
	}

	// 协程调度器的实现 
	// 协程api
	//每次 send accept recv 没有准备就绪就yeild出去

	send前加入，是担心fd会出现send不可写的状况
	否则：
	send()
	spoll_ctl(add,fd,out)
	yeild()
	recv()

	多核模式？
	粘合：与CPU绑定
	1：线程 多线程  需要共用一个调度器，需要加锁   在调度器运行切换时加锁就好
		红黑树加锁，线程安全如何做到？

	2：多进程 ---》fork() --->cpu()粘合  ---》每个进程做协程（进程间协程不共用）


libco    ntyco 都是协程库

协程的性能和 epoll的性能对比
