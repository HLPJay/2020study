1：多核多进程 ==》强隔离，弱统一
	消息队列： zeromq（bind， connect, send recv）最终一致性
		1：协议问题（拆包，粘包问题处理）
		2： 断线重连问题
		3： 进程启动顺序问题
		4：负载均衡问题
		5：数据同步问题（监听发布，请求回应）
	RPC：
		解决强一致性问题，两个系统状态保持一致（银行转账：要么都成功，要么都失败）
	Zoomkeeper： （集群的方式对所有进行协调管理） 分布式系统中的服务
		1：配置项管理 ==》其他都能加载
		2：集群管理
		3：统一命名服务 ==》相同功能的业务，一个修改，负载均衡找到相应处理
		4：状态同步（zk集群中）
		5：分布式锁 ==》文件系统目录的方式，是一个完备锁
	
2：多线程：  ==》强统一，弱隔离
	1：锁的种类多，锁的粒度不好控制
	2：与多进程比较，强统一，弱隔离，数据统一必然引起锁的竞争

3：产生两种并发模型：
		1：CSP模型 ：go语言   process+channel    go corountine+channel
		2：Actor模型
		
理解：RPC， 分布式锁？
	分布式锁：资源很少，多个服务需要竞争某个资源，需要加锁。
		通常用数据库加锁，（redis或者mysql）  有不完备问题
			取到锁的时候，服务挂了，redis无法识别到锁所在服务已经挂了
4：什么是Actor模型？
	1：actor定义：
		1：用于并行计算
		2：actor是最基本的计算单元
		3：基于消息计算
		4：actor之间互相隔离
	
	线程并不是获取并发性的好办法，srlang将actor称之为进程，在代码层次考虑并发性。
		可以多个线程运行多个actor，
		actor之间通过消息沟通，每个actor里有个mailbox（存放消息）
		每个actor都有自己的消息队列
	2：skynet用框架实现actor模型
		1：启动多个并发actor
		2：actor之间通过消息进行沟通
		3：actor拥有私有消息队列，存储有序的消息
		4：actor通过回调来消耗消息
	3：skynet中actor的结构：
		隔离环境，回调函数，消息队列 
	
	4：源码分析：查看c实现的最简单的actor  ==》logger服务
	
		skynet：使用lua实现的actor模型   ==》service_snlua.c 
			隔离环境（lua虚拟机） ==》天然的沙盒环境 
				skynet_callback ==>设置具体的回调函数
				
	lua分析：
		1：写lua代码
		2：lua虚拟机词法分析，生成指令集 .byte
		3：lua虚拟机执行指令集
			嵌入到c语言中使用，起到隔离环境的作用
			
			
	actor隔离环境：c语言来设置，通过lua虚拟机设置
	
5：管理模块
	skynet_module    模块定义
	
==>了解结构，然后了解怎么运行

6：skynet中actor是怎么运行的，消息是怎么调度的？  ==>异步的框架，消息队列，回调
	1：消息队列  
		全局消息队列（存储有消息的actor的消息队列）。    ==》每个值是每个actor的消息队列
		专属actor的消息队列
	2：如何调度？
		启动核个数个线程，轮询全局消息队列，取次级actor消息队列，执行逻辑，还有消息得放回
	3：skynet用到的锁：
		互斥锁，自旋锁，读写锁，信号量
	
	时间小于线程切换，最好用自旋锁
	读写锁：读状态加锁，为共享锁 ，其他线程以度模式进入临界区不会发生阻塞
			写状态加锁，为独占锁， 写状态和读状态都会阻塞等待
		==》读远大于写的情况下使用
	信号量：条件变量+锁实现
		虚假唤醒的问题？ ==》 可能唤醒多个正在等待的线程
	
	
	
	skynet的游戏服务器？rpG，休闲类，arpg
	skynet不仅仅用于游戏开发，思考其他的方案~
	skynet有可以布置集群的 可以查看skynet的wiki   有两种集群
	看一下skynet的源码
	
	云风 ===》skynet 中国最早搞游戏开发的 
	提供了常用的组件，通用框架
	skynet只用了一个进程
7：skynet开启了哪些线程？ ==》skynet_start.c
	1：定时器的线程 ==》类似时间轮的定时器
	2：worker线程  ==》用的我们的信号量，轮询全局消息队列，取消息，运行
		8核cpu的话会开8个线程，并行actor
		worker线程中有个权重  weight
			weight小于0 只取一个消息
			大于0， 取消息队列的长度，再左移weight
				=0 取全部消息处理
				=1 左移一位就是除以2，取出一半的消息
				=2：取1/4的消息
		
	3：monitor线程==》检查过载服务， mailbox消息太多了处理不过来
	4：socket线程
8：消息的生产消费： actor的消息队列中的消息
	生产：	
		1：actor之间发送消息
		2：定时器向actor发送消息
		3：信号向actor发送消息
		4：socket向actor发送消息
	消费：
		skynet callback回调执行消息
9：了解worker工作时锁的唤醒？  因为外部有while循环，不存在虚假唤醒问题~
	weekup为什么传0，为什么传-1
10：消息结构：
	skynet_mq.c  全局消息队列和actor私有消息队列
		handle是actor的句柄
	使用handler进行查找用的读写锁， ==》读比写多
11：skynet中actor的沟通方式 ==>进程能做的，他能做
	相关接口：
	1：skynet.send 和 skynet.redirect(重新映射，A调b，b重新映射到c，c以为a的调用)   异步调用
	2：skynet.call， skynet.ret（call的返回）或者 skynet.call，skynet.response（监听发布模式）  同步调用  call 类似rpc，http
	3：skynet.queue   lua出现的重入问题
		
	4：分布式锁 
		1,2,3call操作
		4用数组存储1，2，3的调用
		1 调用skynet.ret   ==》立即返回
		2，3调用skynet.response
		等待1释放锁后
		2调用skynet.response返回结果 ==》延迟返回
		2释放锁后
		3调用skynet.response  ==》延迟返回

	5：监听发布模型  ===》 skynet.call/skynet.response
	6：推拉模型       ==》 实现负载均衡 gate
	7：请求回应模型  redis驱动
