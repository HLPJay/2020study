2020年，我28：
我选择离开家乡，第一次出远门。
我选择了孤独，远离狐朋狗友。
我开始看书，开始早出晚归。

充实的2020，还在加油！！！

零声云盘的设计实现：
以浏览器和服务器为例：	
	1：web界面发送http给nginx；
	2：nginx进行反向代理发给fastcgi （spawn模块和cgi模块）
	3：通过fastdfs的client模块，发送给tracker查找fastdfs的storage模块进行上传或者下载
	4：上传或者下载完成后，写入数据库。
	5：写入数据库后，写入redis。
	
	
	服务器配置文件内容：
		mysql的用户名和密码
		redis的用户名和密码
		fastdfs client的配置文件路径
		服务器的ip和端口号
		storage模块的ip和端口号
		
	在nginx中配置
		相关cgi的模块信息
		相关dfs的模块信息
		
	根据料盘获取机床的编号：
		根据起床号
		
	在现有的基础上进行项目配置：
		1：fast的基础库fastcommon安装
		2：fastdfs的安装 tracker  storage  和client的配置
		3：理解上传和下载的代码是怎么实现的？？？ 
				==》日志：客户端通过管道实现到服务器日志打印？？
				==》nginx的安装：GCC g++ build-essential  libtool pcre（正则） zlib   openssl   ==》日志文件：/usr/local/nginx/logs
				==>fastcgi ==>web界面发送stdin,通过stdout返回给web， http respose回应web界面，并杀死cgi进程 ==》nginx做fastcgi服务器代理
					spawn-fcgi使用pre-fork模型，打开监听端口，绑定地址，然后fork-and-exec创建线程并执行
					fcgi编写代码库，然后通过spawn-fcgi启动 ===》通过配置文件，+web界面调用测试过程
				==》fastDFS模块：
					通过nginx编译 fastdfs-nginx-module模块，增加makefile并重新编译
						mod_fastdfs.conf
						建立软链接
					storage服务器ip的获取： fdfs_file_info
				==>mysql的安装  mysql-server mysql-client libmysqlclient-dev
					mysql配置文件中设置远程连接，防火墙，端口问题
				==》redis的安装 服务器，客户端，性能测试，文件修复，文件检查，集群管理
					hiredis
				==》后台数据
					配置文件，sql语句，json语句，启动脚本，时间戳
				==》md5保存密码，token验证，base64
				
		4：理解服务端代码：
				==》业务功能，模块比较简单。
				相关的base64，conf，cjon，mysql，redis，md5,log,cgi公共接口
				然后分别实现，登录，查询，上传，共享，注册，等模块的cgi
			那么它是怎么穿起来的？
				
	看上去高大上，实现起来也就那么回事儿。

我很怂，中考将近最后一个星期，同桌因我酗酒，我躲避了三年，丢了； ==》同桌
我很怂，彼此都喜欢的那个女孩，我放纵着喜欢，有距离得放肆，丢了； ==》喜欢
我很怂，因为喜欢我的这个女孩，放弃对我好的，愧疚到现在，还联系； ==》被喜欢
我很怂，从没想过人魔狗样像人样，生活需要仪式感，没敢走出过社会； ==》不会爱
我很怂，认定所谓的真理和对错，插手不该的插手，丢了形影不离的人； ==》兄弟
我很怂，大学里互有好感的那个她，那么好，怕自己守不住永远而退缩； ==》眼里的觉得守不住
我很怂，班级里看对眼的女生，没敢大声说出口，后来依然成了陌生人； ==》没敢尝试
我很怂，用心得给网聊的她她开导，却用自己撞南墙般的方式了了挂念； ==》是小女生，不该
我很怂，她说要嫁给我的时候我还是选择了退缩，说自己想要体会美妙； ==》要幸福
我很怂，从没敢轻易表白，她先有意下定决心去靠近时却输的一塌糊涂； ==》输了，值得
我很怂，别人介绍了一打的好女孩，却是依然还没有靠近过；           ==》若无牵挂，何来厮守
我很怂，总觉得舒坦，开心，会笑，总觉的是那么问心无愧；           ==》。。。
我很怂，却想着30岁扛起一个小天地，2020，我走出了家乡；           ==》我今年28了	
	
	1：ringbuffer 以及pthread的相关接口
	2: 单例，订阅发布，工厂模式的实现及总结。
	3：二叉树，红黑树，b树的代码
	4：连接mysql的接口代码及总结
	5：连接redis的接口代码及总结    redis的源码分析
	6：nginx源码简单分析
	7：select poll epoll的实现原理分析。    reactor preactor分析
	8：协程的实现
	9：线程  线程池  连接池 锁 无锁队列
	10：tcp三次握手  四次挥手  http协议  udp协议
	11：jsoncpp    protobuf 
	12：ipc rpc zeromq  thrift
	13：openssl
	14：事件触发
	15：实现哈希
	16：网络字节序  三次握手 四次挥手 各种状态  listen accept  粘包 半包  tcp选项  流量控制  拥塞控制  限流
	17：共享内存原理
	18：多进程和多线程的区别 哪些是线程私有的？
	19：同步  异步机制  linux中    linux内存机制  任务调度  如何实现定时器的？
		系统调用和库函数的区别
	20：redis常用的数据结构和哈希是如何实现的？ 缓存更新的模式  sentinel上投票选举，raft算法 缓存命中率 redis集群  跳表，索引维护，时间复杂度
	21：mysql  分库分表  mysql的索引实现 以及存储引擎 B+树和b树 联合索引？  性能瓶颈   乐观锁和悲观锁  解决峰值写时慢的问题   大型数据设计，性能指标
	22：如何判断排序是否稳定，十亿数找前100大的，哈希实现，如何解决冲突，跳表插入删除的过程
	23：分布式的id生成器？   zk？   单例模式，适配器模式 观察者模式
		1. 朋友之间的点对点关系用图维护，怎么判断两人是否是朋友，并查集，时间复杂度，过程。
		2. 10g文件，只有2g内存，怎么查找文件中指定的字符串出现位置。
		3. Linux大文件怎么查某一行的内容。
		4. 秒杀系统的架构设计
		5. 十亿个数的集合和10w个数的集合，如何求它们的交集。
		6. 回到网络，刚才你说到直播场景，知道直播的架构怎么设计么，要点是什么，说了几个不太对，他说要避免广播风暴，答不会。
		7. 针对自己最熟悉的项目，画出项目的架构图，主要的数据表结构，项目中使用到的技术点，项目的总峰值qps，时延，以及有没有分析过时延出现的耗时分别出现在什么地方，项目有啥改进的地方没有？
		8. 如果请求出现问题没有响应，如何定位问题，说下思路？
	24：zeromq   kafka  用于流量控制  削峰（消息队列过多，网关返回app业务繁忙 12306）  消息事务 zmq相关接口 
	25：协程的接口：异步的性能，同步的编程方式。   aio，为什么服务器网络io的时候不用异步io（io密集型加锁）
	26：NtyTCP
	27：进程是资源封装单位，线程是调度的单位
	

pthread.h头文件中主要包含了相关线程的创建，销毁，属性，管理，锁，读写锁，锁信号，自旋锁，设置线程调度先后的函数等	
pthread的相关接口：
	extern int pthread_create (pthread_t *__restrict __newthread, const pthread_attr_t *__restrict __attr,
		   void *(*__start_routine) (void *), void *__restrict __arg) __THROWNL __nonnull ((1, 3));
		==》抛出异常，不为null的1，或者3
	extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));
	extern int pthread_join (pthread_t __th, void **__thread_return);
	
	extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __THROW;
	extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return, const struct timespec *__abstime);
			 
	extern int pthread_detach (pthread_t __th) __THROW;
	extern pthread_t pthread_self (void) __THROW __attribute__ ((__const__));
	extern int pthread_equal (pthread_t __thread1, pthread_t __thread2) __THROW __attribute__ ((__const__));

	相关设置属性的接口：
	
	相关调度控制的接口：
	
获取线程名，获取线程级别，pthread_yield， pthread_once，绑核
	extern int pthread_getname_np (pthread_t __target_thread, char *__buf,size_t __buflen) __THROW __nonnull ((2));
	extern int pthread_setname_np (pthread_t __target_thread, const char *__name) __THROW __nonnull ((2));
	
	extern int pthread_getconcurrency (void) __THROW;
	extern int pthread_setconcurrency (int __level) __THROW;
	
	extern int pthread_yield (void) __THROW;
	extern int pthread_once (pthread_once_t *__once_control,void (*__init_routine) (void)) __nonnull ((1, 2));
	
	extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,const cpu_set_t *__cpuset)__THROW __nonnull ((3));
	extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,cpu_set_t *__cpuset)__THROW __nonnull ((3));
	相关处理取消的接口：
	extern int pthread_setcancelstate (int __state, int *__oldstate);
	extern int pthread_setcanceltype (int __type, int *__oldtype);
	extern int pthread_cancel (pthread_t __th);
	extern void pthread_testcancel (void);
	线程清理相关的接口：
	
线程锁的相关接口，以及锁相关属性的接口。
	extern int pthread_mutex_init (pthread_mutex_t *__mutex, const pthread_mutexattr_t *__mutexattr) __THROW __nonnull ((1));
	extern int pthread_mutex_destroy (pthread_mutex_t *__mutex) __THROW __nonnull ((1));
	extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)__THROWNL __nonnull ((1));
	extern int pthread_mutex_lock (pthread_mutex_t *__mutex) __THROWNL __nonnull ((1));
	extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,const struct timespec *__restrict__abstime) __THROWNL __nonnull ((1, 2));
	extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)__THROWNL __nonnull ((1));

设置和获取锁的优先级：	==》相关锁的属性未展示
	extern int pthread_mutex_getprioceiling (const pthread_mutex_t * __restrict __mutex,
					 int *__restrict __prioceiling)__THROW __nonnull ((1, 2));
	extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
					 int __prioceiling, int *__restrict __old_ceiling)__THROW __nonnull ((1, 3));
	
线程设置条件变量的接口，以及条件变量属性的接口： ==》相关属性接口未展示
	extern int pthread_cond_init (pthread_cond_t *__restrict __cond, const pthread_condattr_t *__restrict __cond_attr) __THROW __nonnull ((1))
	extern int pthread_cond_destroy (pthread_cond_t *__cond) __THROW __nonnull ((1));
	extern int pthread_cond_signal (pthread_cond_t *__cond)  __THROWNL __nonnull ((1));
	extern int pthread_cond_broadcast (pthread_cond_t *__cond) __THROWNL __nonnull ((1));
	extern int pthread_cond_wait (pthread_cond_t *__restrict __cond, pthread_mutex_t *__restrict __mutex) __nonnull ((1, 2));
	extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,pthread_mutex_t *__restrict __mutex,const struct timespec *__restrict __abstime) __nonnull ((1, 2, 3));

	

线程读写锁的接口，以及线程读写锁属性的接口：
	extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,const pthread_rwlockattr_t *__restrict__attr) __THROW __nonnull ((1));
	extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)__THROW __nonnull ((1));
	extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)__THROWNL __nonnull ((1));
	extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)__THROWNL __nonnull ((1));	
	extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)__THROWNL __nonnull ((1));

	extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)__THROWNL __nonnull ((1));
	extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,const struct timespec *__restrict__abstime) __THROWNL __nonnull ((1, 2));
	extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)THROWNL __nonnull ((1));
	
相关自旋锁的接口：
	extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)__THROW __nonnull ((1));
	extern int pthread_spin_destroy (pthread_spinlock_t *__lock) __THROW __nonnull ((1));
	extern int pthread_spin_lock (pthread_spinlock_t *__lock)__THROWNL __nonnull ((1));
	extern int pthread_spin_trylock (pthread_spinlock_t *__lock)__THROWNL __nonnull ((1));
	extern int pthread_spin_unlock (pthread_spinlock_t *__lock) __THROWNL __nonnull ((1));
	
相关线程障碍的接口：  ==》属性接口未展示
	extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,const pthread_barrierattr_t *__restrict__attr, unsigned int __count)__THROW __nonnull ((1));
	extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)__THROW __nonnull ((1));
	extern int pthread_barrier_wait (pthread_barrier_t *__barrier)__THROWNL __nonnull ((1));
	extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr) __THROW __nonnull ((1));
	
创建线程的key值
	extern int pthread_key_create (pthread_key_t *__key,void (*__destr_function) (void *)) __THROW __nonnull ((1));
	extern int pthread_key_delete (pthread_key_t __key) __THROW;
	extern void *pthread_getspecific (pthread_key_t __key) __THROW;
	extern int pthread_setspecific (pthread_key_t __key,const void *__pointer) __THROW ;
	extern int pthread_getcpuclockid (pthread_t __thread_id,_clockid_t *__clock_id)__THROW __nonnull ((2));
	
使用fork创建新进程：
	extern int pthread_atfork (void (*__prepare) (void),void (*__parent) (void),void (*__child) (void)) __THROW;
