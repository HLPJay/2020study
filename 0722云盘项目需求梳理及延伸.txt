思考云盘项目:
	主要性能瓶颈肯定在数据库,那么如何优化?     sql语句/分库分表/redis缓存/异步

	思考需求及架构:
		1:云盘的功能: 上传, 下载, 共享, 删除
			上传: 通过web服务器端识别文件,实现文件上传.
				 对某些特定的文件实现共享.
			下载:  获取该用户所拥有的云盘文件,选择下载.
				  搜索共享文件的已有文件,进行下载.
				  查看云盘上所有已共享的文件,进行下载.
			删除: 获取用户名下所有文件,包括共享文件,选择删除, 
					===>有共享权限的会先删除共享再删除文件(可以加提示)
		  衍生:	需要对用户进行管理.
		  	注册,登录,管理名下文件,管理共享文件.
		2:实现方案: 
			云盘的使用 ====>通过浏览器,和app,以及跨平台
			第一目标: 实现浏览器,服务器模型的设计.
			第二目标: 实现客户端模块的代码.

			采用nginx做服务器代理作为服务器入口.

		web浏览器 <====> nginx  <=====>后台业务处理  <======>mysql
                  http           cgi           redis/消息队列/异步

                思路: nginx收到消息,cgi进行处理,mysql进行数据存储.
            预计迭代方案:
            	1:nginx服务器的搭建, fastcgi实现业务处理(fastdfs实现文件上传下载等/数据库),并返回结果
            	2:考虑系统的容灾,系统的并发,对系统进行测试以及防护.
            	3：断网，文件校验，大文件的安全可靠传输？

            思考:
            	当下场景业务场景比较简单,所以采用nginx+fastcgi的模型
            		openresty+lua 模型是什么? 
            			==》集成了Lua库、第三方模块以及大多数的依赖项。 
            			==》让Web服务直接跑在Nginx服务内部，充分利用Nginx的非阻塞 I/O 模型
            		电商网站的实现方案是什么?并发如何估计?

		3:预计业务流程:
			首页是注册/登录，只有登录后才可以查看相关的业务：
				1：搜索栏，可获取已共享的所有文件，可搜索。
				2：可以选择本地文件进行上传。 ==》图片，文件，视频等
				3：可以查看自己的存储文件，进行下载。
				4：可以预览在线文件
		4：练习模块demo，构建架构图。
				fastdfs是怎么上传下载的？   如何实现调用？
				mysql如何设计表格？
				redis如何缓存，mq消息队列如何使用？
		5：数据库接口设计：
			1：数据库表设计：
				分库分表？
					用户信息表 ：id，用户名，昵称，密码md5，电话，邮箱，创建时间
					文件信息表 ：id，文件id（路径）， 文件url， 文件md5，大小，类型，几个人拥有这个文件
					用户和文件对应表：id，用户id， 文件md5, 文件名，共享状态，下载量，创建时间
					用户文件数量表：id， 用户， count
					共享文件列表： id， 用户， 文件md5, 下载量， 文件名， 创建时间
			2：接口设计
				根据对应的业务功能，内部提供代码处理相对应的接口。


		6：考虑进行迭代实现：
			1：整体架构
				nginx是入口，cgi进行处理，fastdfs进行文件管理，mysql数据存储。
			2：安装nginx并测试   ===》
			   安装fastdfs并测试 ==》
			   编写cgi程序并测试  ==》
			   cgi程序中增加mysql并测试 ==》
			   cgi程序中增加redis并测试 ==》
			   多机测试





 nginx在设计的时候主要着眼点就是高性能和对物理资源的高密度利用，因此采用了模块化、事件驱动、异步I/O、单线程及非阻塞架构，并大量采用了多路复用及事件通知机制，也支持mmap(内存映射)。


 项目团队初始的时候要注意：
 	1：项目分工的模块明确化
 	2：项目命名的规范化
 	3：测试的严谨性
 	4：项目方案要互相讨论找灵感
 内容管理系统划分： ==》CMS
 	1：子系统管理：内容管理
 	2：模板管理系统： 可以调整模板
 	3：发布管理
 单点登录的实现： ==》用户一处登录，其他子系统都能自动识别到，如何保证信息安全 ===》存储信任，验证信任
 	服务器保存信任，免密系统登录时去服务器上验证。 ==》加白名单确定哪些可以免密
 高效存储： redis memcached分布式缓存
 防止篡改： 数字签名

数据备份，读写分离，分库分表
使用redis代替session
超时异常怎么办？
多个域名下，一个用户登录，如何做到免登录？  ===》登录时，去同步其他的域，获取免登录cookie
不同的请求走不同的处理， 如要操作数据库的，走管道，静态页面，不用走
RPC远程过程调用
限流

购物车的细节：
	登录不要放在购物车之前
	自动勾选本次选中的项目
	注意沉底商品
	归类展示
	优惠提醒
