https://bugzilla.kernel.org/  ===》bugzilla读内核的bug
从网络协议栈看内核源码
看内核里net模块 看ipv4模块  ==》tcp.c
也可以从进程管理开始读

内核面试：
	协议栈
	进程线程
	进程管理 ==》task_struct 写时复制COW copy on write
红黑树必须理解，面试必备！
红黑树在进程调度的时候是怎么用的？ 有哪些应用？  tcp  内存管理    epoll    ==>内存管理 进程管理   sk_buff怎么释放管理
	key value 存储
	顺序
	
fs模快  epoll.c

用户数据报协议和ip分片：
	UDP
	1:udp把不提供差错纠正，无连接特性 ==》把应用程序传给ip层消息发送出去，不保证数据一定到达。
	2：udp头部    源端口 目的端口    长度  校验和  ==》 8字节  +负载数据（长度可变）
	3：sock命令 生成udb数据报
		dump命令查看报文,观察两次的不同
		sock -v -u -i 10.0.0.3 discard
		sock -v -u -i 10.0.0.3 discard
		tcpdump -n -p -s 1500 -vvv host 10.0.0.3 and \(udp or icmp\)
	观察其中所使用的端口号，linux中端口参数范围可修改：
		cat /proc/sys/net/ipv4/ip_local_port_range
	4：ipv6头没有校验和，用ipv6时 udp一定要加校验和
		ipv6 最小MTU是1280字节
		ipv6支持超长数据报
		通过ipv4隧道传输ipv6  ===>需要ipv4到ipv6的一些过渡机制
	5：分片先发arp请求
		最大数据报长度 65535   16字节决定  65507数据长度
	6：ip中包含源ip和目的ip
	   udp包含源端口和目的端口
	7：DNS头  消息格式
		dns允许中间服务器记录  如邮件
			中转可以检查出违规的消息
	8:DNS消息使用TCP传输   用host -l home.验证
	9：TCP的协议头设计
	10：三次握手  四次挥手
	11：连接超时   选择确认  窗口缩放  时间戳  用户超时    tcp的最大传输单元
	12：tcp的状态转移
	13：tcp设置重传超时 ==》计算方案？几种
			快速重传
			延时ACK
			禁用Nagle算法
			流量控制和滑动窗口
			拥塞控制==》慢启动 == 》慢启动和拥塞控制的选择方案
			转发确认和速率减半
			限制传输
			拥塞窗口校验
			
。。。。。感觉没有必要看第一版协议了  ===》研读第二版的实现！！！
