1：nginx的handler模块
2：nginx的源码学习：核心代码在src
	思考nginx的http的流程是怎样的？ 
	==》从配置文件中http开始，在我们代码==》的cmd命令里肯定会有
	==》从对应的cmd里面开始跟踪查看  处理函数  ngx_http_block
	==>ngx_http_optimize_server函数，http server的信息
	==》可以在http里面有多个server，内部初始化多个listen 
		==》ngx_http_init_listening（有个handler，accept返回后调用ngx_http_init_connection创建一个连接（客户端调用connection时））
				==》连接前已经运行了，后面就只是处理了。
					可以listen多个多个端口，那么多进程和多个端口什么关系？ ==》 多个进程 listen，每个进程，listen所有端口
					多个进程，如果连接，到底连接哪个进程？ （惊群问题） ==》真实只有一个处理，系统资源的浪费，
						strace工具  ，进程有多少个系统调用可以跟出来  strace ./test
						
					多个进程监听同一个端口？  listen一个端口后，fork进程
				handler：
					listen --》对应的handler  accept处理
					init_connect -->对应的handler   read/recv处理
						也就是ngx_http_wait_request_handler真正开始的位置，循环处理头，等
							==》可以跟踪一下 看看怎么处理的？   http_request也是内部创建的
							==》ngx_http_read_request_handler
				如何解决惊群问题？
					1：谁获取窗口，  锁   ngx_trylock_accept_mutex ==>多个进程共享的一把锁，哪个获取到哪个处理
						保证只有一个epoll_wait监听所有的fd
							获取到锁就挂起，去处理已经获取得到的fd，其他的继续处理。
					2：
					
3：		惊群有三种  accept惊群，epoll_wait惊群，线程条件等待惊群 pthread_cond_wait
4:http十一个状态机，通过phase_handler++来变更状态,从ngx_http_core_generic_phase开始，第一个执行ok才可以下一个
		==》设计模式里的状态模式？
		==》返回ok还有next，处理完后ngx_http_finalize_request处理下一个状态
		  rc= ph->handler(r); 每个状态里都有，从这个开始往下  ，handler链表，多个

ngx_http_init_phase_handlers初始化了所有的状态的回调函数，ngx_http_core_run_phases是状态机开始的地方，每一个状态init的回调函数,会决定下一个状态
ngx_http_finalize_request
5：那么http返回数据怎么处理呢？
	ngx_http_send_header  ==>ngx_http_top_header_filter   响应头
	ngx_http_output_filter      响应body
	
	http协议 = header +body
	
	ngx_http_addition_filter_init   ==>理解四个指针，把头加进去，然后两个函数本来是要自己实现的
6：练习：在默认网页中增加一些自己的东东
	修改服务端，查看效果，查看网页源码，在html最前面加了一个模块（一些内容） ==》过滤器模式添加的
	       思考，加在中间、后面？
		  我们能看到的html源码都是body，要添加： 1：header中增加长度，2：body中增加内容
7： ngx_http_send_response开始分析
		==》从epoll_module中分析send/write  从epoll--》wait--》fd-->fdout
				response：十一个状态处理完后，每个都组织起来，综合到一起，epoll_wait返回可写状态，
				可以发送然后才去发送的。
	
				
	
	作业：http的十一个状态过一遍，把filter过滤器跑起来
		透明代理？
		惊群是如何加锁的？
汇总：	
	1：http block
	2：http十一个状态  处理请求
	3：过滤器   ==》处理完组织数据后，send前调用filter
	4：
	
	
	多进程listen有什么优势啊 有比单进程不加锁高效吗
		多进程充分利用了内核
		如果session直接无关联，可以listen多个端口
		为什么不用多线程？   多线程更复杂，有共享资源
	
