redis的主从复制：
	1：redis的dict   
		key都是string类型，hash函数将string转为64位整数，映射到数组中
		哈希冲突：链表的方式
	2： 扩容 
		不扩容：持久化的时候
		缩容：小于0.1的时候  ， size = 8  在size=0时，缩容到4
		rehash实现 ht[0] ht[1] 渐进式
	3：dict的遍历方式： 1：全遍历，keys， hkeys取出所有keys，尽量不要使用
						2：分步遍历  scan hscan
			分步遍历会出现 扩容 缩容 渐进式rehash的情况？  如何正确遍历？？
				==》redis的遍历方式 二进制 %size来遍历 
			思考：如何遍历的？实际遍历中的情况？
	4： client 发送消息都是请求回应的方式 redis server
	   scan  ==》游标？？？ 全遍历的优化
	   redis是单线程的，scan中需要考虑 扩容 缩容  rehash（会打乱顺序，但是有规律） ==》多个客户端的操作
	5：源码阅读  1：确定主题  
				 2：构造环境   打日志 debug 
				 3：验证
		跳表的实现：zset  自动排序  排行榜的功能
			server.c中命令的定义~  zadd zscore  zrange  zrevrange
		思考：如何自定义排序？
		
		跳表 增加多层有序链表 二分查找 O{logN}
		1:结构的区别：多层的有序链表，二叉树
		2:搜索的区别：大概率的O(logN)   O(logN)
		3:功能性区别： O(logn) zrange  logN*o(logN)
		4:实现的区别： 简单       复杂
		
		理想跳表增加，删除改变结构的维护
		通过概率的方式模拟理想跳表： 每个节点出发，都有二分之一的概率有上一层节点
		研究t_zset.c的源码
	6：编码方式  object encoding key
	    通过修改代码，测试跳表的方案   zset-max-ziplist-value 改为2   长度改小
		flushall
		zadd rank 10 tttt
		object encoding rank
		==>skiplist
	7:redis类型stream string list set zset hash hyperloglog
	8:redis的持久化 哨兵模式  事务  事件处理  dict  主从复制
	  高可用==》主从复制 哨兵模式
	9： cap  c consistency 一致性  a availability 可用性 p 分区容错性
	10：主从复制： info replication
		AUTH 123456
		slaveof 127.0.0.1 6379
		info replication 查看主从连接情况
		
		一般三主六从      可以从嵌套从，做线上数据的测试
		读写分离： 一致性要求不高的时候，master提供写功能，slave提供读功能。
				   一致性要求高的情况，如游戏场景，不能读写分离的方式。
				   master设置不做持久化，slave做持久化
	11：持久化 ：
	主从同步的方案：
		涉及增量备份和全量备份 	
		2.8版本以前是做的全量同步（通过rdb） 
			1：新加入节点
			2：主从连接故障
			3：从节点重启
		如果是主从连接故障，只需要将少量的写操作同步给数据库就ok
		
		2.8版本以后： 增量同步
		    运行id是一样的，进行增量同步   不一样则全量同步
			1：记录偏移量，psync 发送偏移量 ==》主运行id   offset
			   偏移量是否在缓冲区中，在则后面的数据同步 ==》同步 不需要持久化
			2：offset 是环形缓冲区，如果过了 要全量
		重连的slave，先发送ping 收到pong回应
		
		优化：实际环境中，对从节点重启（如从数据库更换机器） linux scp 
				可能出现主从切换（数据时差不多的，没必要全量同步） replid2 second_replid_offset
			
			==>保存运行id和offset在rdb中
			==》主从切换 从需要记录之前的运行id以及偏移量
		
		简单可用，逐步优化
		AB服（长连接服务器主备容灾，热更新） 加个中转服务器，A服务器正常运行， A出现故障，能快速切换到B服务器
