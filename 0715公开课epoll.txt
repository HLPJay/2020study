思考一下:
    现在每个月的工资也就那么六七千,不换怎么生活

古月居相关的学习!
1:ntyco的学习  协程
2:ntytcp的学习  epoll
3:即时通信和个人博客的搭建  参看古月居
4:reactor的实现  反应堆==>从管理io,改为管理io事件的方式

5:proactor的实现
    ==>通过信号的方式触发,执行回调 (方案一)

思考:
    reactor和proactor是什么?
    redis中的reactor
    memcached中多线程方式如何实现的?
    nginx多进程网络io是如何实现的
    listen fd是否有et和lt之分?
        ==>只有可读事件,而且每个可读事件独立 用et,会发现多个可读事件放在一起触发一次,会有问题,所以用LT
    socket相关接口  epoll相关接口


反应堆  reactor  将管理io,换成管理io的事件方式. ===>每个io在某一时刻只有一个事件触发
reactor 如何知道io是否有事件   ==>通过epoll_wait 主动轮循所有
    ==>主动触发调用
proactor  不再依赖epoll_wait主动轮循触发  io事件触发,主动触发回调,回调到应用程序,在应用程序中进行读和写.
    ==>直接回调出来执行



基于epoll如何实现proactor ?
    linux中基于epoll做的都是reactor
    proactor是基于异步io做的    windows上使用的iocp做的   linux中异步io是aio

reactor和proactor底层实现是不一样的,proactor依赖于操作系统

为什么aio不能用作网络的高并发网络io(统一时刻能承载的io数)
    linux中,分为内核态和用户态,      aio,从内核里回调到用户态,很多时,切换频繁,造成了内核空间的浪费,
        内核态,1G   用户态 3G    内核态空间越来越小

        aio主要用在磁盘读写


reactor 基于epoll 的开源:
    redis,memcached,skynet, mysql,nginx,haproxy,mongodb          skynet==>基于业务模型用的actor,网络io用的epoll

    都是用reactor实现的,有什么区别?
        redis  memcached nginx分析 
        redis,单线程的,

        分析各个开源库中reactor的实现

分析redis的代码: 从main函数开始,直接分析相关的epoll和reactor
epoll_wait返回有两种情况:
    1:有io事件返回
    2:epoll_wait第四个参数,超时,返回

服务器宕机,重启后,会有大量的客户端发起连接,   epoll循环的冲击   

测试:一个线程,1s钟能处理多少个accept?   单线程1s中能处理大约10W   

accept处理不过来==>accept和send recv分离,不再同一个线程里处理
    master线程放accept  或者多个线程每一个线程放个accept
    之后,抛给子线程,另外的slave线程做recv和send线程    ===>memcached里面这样使用
        ==>可以用协程来做~~~
    多个accept可以大大增加服务器每秒接入量 ==>memcached   ===>业务场景不一样,使用场景不一样
    redis业务都是内存,内存纯操作....  业务场景,单线程 ==>不涉及磁盘操作,阻塞,多线程反而是负担

