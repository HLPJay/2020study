ZMQ的学习和测试：   ===》消息队列
 	1：mq是什么，解决什么问题，什么时候用？有哪些好处？
	2：安装mq
	安装前必须的库：
		 sudo apt-get install libtool 
		 sudo apt-get install pkg-config
		 sudo apt-get install build-essential
		 sudo apt-get install autoconf
		 sudo apt-get install automake
	从github上下载并安装sodium库      ===> 加密，解密，签名，密码哈希
		https://github.com/jedisct1/libsodium 
		
		 1779  2020-06-23 17:25:48 git clone git@github.com:zeromq/libzmq.git
		 1781  2020-06-23 17:29:28 git clone  git://github.com/jedisct1/libsodium.git
		 1783  2020-06-23 17:30:57 cd libsodium/
		 1785  2020-06-23 17:31:10 ./autogen.sh -s
		 1786  2020-06-23 17:31:30 ./configure && make check
		 1787  2020-06-23 17:32:52 sudo make install
		 1788  2020-06-23 17:33:01 sudo ldconfig
		 1789  2020-06-23 17:33:08 cd ../
	安装zmq：
		 1791  2020-06-23 17:33:13 cd libzmq/
		 1792  2020-06-23 17:33:18 git tag
		 1793  2020-06-23 17:33:40 git checkout v4.3.2
		 1794  2020-06-23 17:33:49 git branch
		 1795  2020-06-23 17:33:56 ./autogen.sh 
		 1796  2020-06-23 17:34:23 ./configure && make check
		 1797  2020-06-23 17:38:56 sudo make install
		 1798  2020-06-23 17:39:30 sudo ldconfig

		git clone git@github.com:zeromq/libzmq.git
	3：mq测试代码模型的运行和整理：==》libzmq-test
		获取测试的代码：==》使用cmake进行编译
		 1829  2020-06-23 17:52:50 mkdir build
		 1830  2020-06-23 17:52:51 cd build/
		 1831  2020-06-23 17:52:52 ls
		 1832  2020-06-23 17:52:55 cmake ..
		 1833  2020-06-23 17:52:58 make
		cmake的原理及运行~
		
	4：测试代码的运行 ==》注意测试消息的重复读取
	
	
REQ/REP 请求响应模型 一请求一响应，收不到响应是发不出去的 ===》多次发送是无效的      ===》一发送  一接收
	创建客户端，绑定类型，连接服务器，请求，应答
	创建服务器，服务器是要绑定的，接收，应答
PUB/SUB模型 发布订阅模式 ==》可以做过滤 字符匹配  wuserver.c  wuclient.c   ==》一个发送，多个接收，发布重复就会被替换
	会丢消息，先启动发布端的情况下。                    ===》一个发送，多个接收
	创建socket指明类型，发布温度
PUSH/PULL模型  推拉模型 ，可以做并行处理   taskvent.c  ===》负责发数据   taskwork.c负责分批处理数据（可以多个） tasksink.c 负责接收处理后汇总的消息
	把任务分发到不同work，然后汇总                     ===》发送任务后给不同模块处理，并汇总结果。
	pull谁抢到是谁的(类似生产者消费者)
	测试代码，三块
	整理模型与代码的对应
	加结束符"\0"做封装 有两个push==》去理解
	开多个work测试==》理解代码，并行计算
	push的接口内部有均衡算法，多个worker自己分发，send时用户层不用关注有多少pull
ROUTER/DEALER     rrbroker.c ===>负责做中转  rrclient.c  ===>下发后通过broker中转去处理   rrworker.c  ===>负责接收处理消息并进行发送
	===》问题:如何实现的多个接收多个均分发消息？   ===》多个客户端对多个处理端
	客户端可以多个处理 
	broker实际是中间的一个服务==》绑定了两个端口分别做通信
	可以多个worker    是均分的==》中间转发
	请求应答模式，提供了多个后端服务器
			
	
	遗留：
		1：研究zmq的依赖库的作用。
		2：sodium库的作用及相关静态编译
		3：zmq的测试代码和编译
	
