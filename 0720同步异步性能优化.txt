性能优化:
	1:对应的数据库
		单库的优化
		集群的优化
		业务服务器对数据库连接的优化
	2:日志的优化 ==>每次日志落盘
		每个客户端访问服务器,服务器要对日志落盘
		由同步的落盘,改为异步的落盘(落到磁盘).
	3:多线程变多进程,由单核变多核,
		加锁等问题
		会很大得提升性能
	4:同步改为异步
		例如:访问数据库,等待数据的返回,把请求和返回结果分离
			或者把请求和处理,做到解偶

思考:服务器端和客户端,异步是怎么体现出来的? 百万并发的代码~

理解异步:
	理解百万并发中服务器和客户端的逻辑.
	这里触发FIN_WAIT2, 以及定时器 ==>状态迁移图   
		FIN_WAIT2状态?处理FIN_WAIT2状态, kill进程
	研究代码中为什么性能增加,以及为什么增加这么多? 同步和异步,线程池,事件
	DNS的异步代码,同步代码分析

同步:代码流程简单
异步:比同步性能好
同步的编程,异步的性能? ==>协程

同步和异步,阻塞和非阻塞的理解:
	同步可以是阻塞,也可以是非阻塞的,异步一样.

	同步和异步: 形容的是[两者]之间的关系.
	阻塞和非阻塞: 形容状态. 

同步： 客户等待返回结果,不能做其他事
同步的思想是：所有的操作都做完，才返回给用户。这样用户在线等待的时间太长，给用户一种卡死了的感觉（就是系统迁移中，点击了迁移，界面就不动了，但是程序还在执行，卡死了的感觉）。这种情况下，用户不能关闭界面，如果关闭了，即迁移程序就中断了。

异步： 放入消息队列,可以做其他事,
将用户请求放入消息队列，并反馈给用户，系统迁移程序已经启动，你可以关闭浏览器了。然后程序再慢慢地去写入数据库去。这就是异步。但是用户没有卡死的感觉，会告诉你，你的请求系统已经响应了。你可以关闭界面了

协程框架   libco, libgo, ntyco, C++20, boost, lua都有
很多的开源框架,同一类的,只要了解一个. 如 redis  memcached
